\title{Concourse v10}{v10}

\use-plugin{slides}
\styled{slides}

\title-slide{Concourse v10}{
  \youtube{YHRyirjO5rM}
}

\title-slide{Resources v2}{
  an abridged update
}

\detail{Resources v2}{
  Resources v2 is now an idea of a 'generalized resource interface', decoupled
  from artifact versioning.

  Users will be able to use v1 and v2 resources side-by-side, and users won't
  even have to upgrade to v2 to use new Concourse features.

  It's just a refinement of the same idea.

  For these slides, remember that 'version' is now called 'config fragment'.
}

\title-slide{RIP Spaces}{
  2017-2019

  we hardly knew ye
}

\detail{What was spaces?}{
  Behind the name, there are a few great features:

  \list{
    Dynamically running jobs across 'spatial' change, i.e. branches and PRs.
  }{
    "Fanning in" using \code{passed} constraints across spaces.
  }{
    Automatically cleaning up spaces for closed PRs, etc.
  }

  These still make sense. So why is 'spaces' dead?
}

\detail{Analysis paralysis}{
  Our first approach was to \bold{extend} resources and jobs to support
  finding versions and running builds across spaces.

  This approach proved to be strategically expensive.

  We thought of it as one big feature, and we baked it into the entire stack,
  from the web UI down to the resource protocol.

  Having a single feature touch so many things led to lot of second-guessing
  and many different iterations.
}

\detail{Learning to walk again}{
  Can we break this big feature up?

  Recently we were able to decouple 'Resources v2' from 'Spaces' by taking a
  completely different approach, leveraging composition instead of directly
  coupling them.

  Doing this was liberating: suddenly we could deliver two big features
  independently instead of all at once.

  Can we do the same for 'spaces'?
}

\detail{Hold my hand...}{
  Let's go on a journey.

  I've got a few features to propose, which I hope are independently useful.

  When they're used together, they become way more powerful.

  Hang in there - the dots should connect as we go along!
}

\title-slide{Archiving Pipelines}{
  \exodia{img/exodia-right-arm.png}
}

\detail{Archiving Pipelines}{
  Pipelines can be archived when they are no longer needed.

  When archived, a pipeline becomes completely inactive, and its name can be
  used for later pipelines. This is basically a soft-delete.

  \codeblock{sh}{{
  $ fly archive-pipeline -p pipeline-name
  }}

  This is a pretty simple feature on its own, but it's also a precursor to
  "instanced pipelines."
}

\detail{Complexity estimate}{
  Someone actually started on a PR for this a while back. It doesn't seem too
  hard.

  \bold{API}: small - support archiving/unarchiving, support re-using names of
  archived pipelines.

  \bold{UX}: medium - 'dim' and/or stash away archived pipelines.

  \bold{Core}: x-small - don't schedule archived pipelines.
}

\title-slide{Instanced Pipelines}{
  \exodia{img/exodia-left-arm.png}
}

\detail{Instanced Pipelines}{
  Pipeline templates can be "instantiated" with \code{((vars))} that also
  become part of the pipeline's identifier.

  \codeblock{yml}{{
  $ fly set-pipeline -p release \\
      -i version:5.3 \\
      -c ci/pipelines/release.yml
  }}

  This is a small UX change that allows simple pipeline hierarchies to form - 2
  levels deep instead of N.
}

\detail{Complexity estimate}{
  \bold{API}: medium? - allow multiple instances of same pipeline name with
  different vars.

  \bold{Core}: x-small - schedule all pipeline instances.

  \bold{UX}: medium - probably a lot of navigation UX to figure out, but
  hopefully simpler than 'spaces'.
}

\title-slide{\code{set_pipeline} step}{
  \exodia{img/exodia-right-leg.png}
}

\detail{\code{set_pipeline} step}{
  Pipelines can be configured by using a new \code{set_pipeline} step in a
  build plan:

  \code{{
  plan:
  - get: ci
  - \bold{set_pipeline: concourse}
    file: ci/pipelines/concourse.yml
  }}

  The pipeline will be set within the team running the build, and will start
  un-paused.
}

\detail{\code{set_pipeline} + instances}{
  The \code{set_pipeline} step can be used to 'sync' all instances of a
  pipeline:

  \code{{
  plan:
  - get: ci
  - set_pipeline: concourse
    file: ci/pipelines/concourse.yml
  - set_pipeline: release
    file: ci/pipelines/release.yml
    \bold{instance_vars: \{version: 5.3\}}
  - set_pipeline: release
    file: ci/pipelines/release.yml
    \bold{instance_vars: \{version: 5.2\}}
  }}
}

\detail{\code{set_pipeline} + archiving}{
  A build which uses \code{set_pipeline} for setting instances determines the
  full set of active instances for the pipeline.

  All other instances will be automatically archived when the build completes.

  This way release pipelines will automatically become archived when they're no
  longer relevant.

  This will be more important later!
}

\detail{Complexity estimate}{
  \bold{API}: x-small - support parsing it as part of the build plan.

  \bold{Core}: small - implement the step. medium once we do instance
  archiving.

  \bold{UX}: small - support rendering the step.
}

\title-slide{\code{across} step}{
  \exodia{img/exodia-left-leg.png}
}

\detail{\code{across}: build matrixes}{
  An \code{across} step runs a given step across all versions returned by a
  resource \code{check}:

  \code{{
  \bold{across}: supported-ruby-images
  \bold{as}: ruby
  do:
  - task: unit
    image: ruby
    file: ci/tasks/unit.yml
  }}

  The \code{across} step can be nested to do N-dimensional matrixes.
}

\detail{\code{across}: pipeline matrixes}{
  By composing these two steps and using \code{instance_fragment} , we now have
  pipeline matrixes:

  \code{{
  across: concourse-branches
  as: branch
  do:
  - set_pipeline: branch
    \bold{instance_fragment: branch}
    file: ci/pipelines/branch.yml
  }}

  When a branch goes away, its instance will become archived.
}

\detail{\code{across} with \code{trigger}}{
  The \code{across} step will support \code{trigger: true}. This way the build
  will fire on \italic{any} change to the set.

  \code{{
  across: concourse-branches
  as: branch
  \bold{trigger: true}
  do:
  - set_pipeline: branch
    instance_fragment: branch
    file: ci/pipelines/branch.yml
  }}
}

\detail{Complexity estimate}{
  \bold{API}: x-small - support it as part of the build plan.

  \bold{Core}: medium/large - implement a new type of scheduling and
  triggering, similar to \code{get} step handling but for \italic{sets} of
  versions. Construct a build plan that repeats the step with a \code{get} for
  each version.

  \bold{UX}: medium - show all the steps, probably in some sort of tab UI.
  There's some prior art with \code{attempts:}.
}

\title-slide{Projects}{
  \exodia{img/exodia-head.png}
}

\detail{What is a project?}{
  A project is a namespace for pipelines, resources, and tasks.

  A project is bootstrapped by a resource containing the project's
  configuration, along with its tasks, resources, and pipelines.

  Many projects may exist within a team.
}

\detail{\code{fly set-project}}{
  Projects are configured with \code{fly set-project}:

  \codeblock{sh}{{
  $ fly -t ci set-project \\
      --project booklit \\
      --type git \\
      --source uri=https://github.com/vito/booklit \\
      --config-path ci
  }}

  The \code{--config-path} flag identifies the sub-directory within the
  resource from which to load the project config.
}

\detail{Project structure}{
  Concourse will \code{check} for new versions of the project and load the
  project's config, resources, tasks, etc.:

  \codeblock{sh}{{
  ci/project.yml
  ci/tasks/test.yml
  ci/resources/booklit.yml
  ci/pipelines/booklit.yml
  }}

  Pipelines shrink down to just job definitions, removing hundreds of lines of
  YAML. Separate files are much easier to work with.
}

\detail{It's just a build plan!}{
  A minimal project configuration contains a \code{name} and a \code{plan}:

  \codeblock{yaml}{{
  name: booklit
  plan:
  - task: test
  }}

  The project's \code{plan:} will run every time a new version of the project
  is found, with the project resource itself available under the configured
  name.

  Kinda like Travis/Circle CI.
}

\detail{Git Ops}{
  Projects, when combined with the \code{set_pipeline} step, allow your entire
  project to be automated and reproducible.

  It's a full blown build plan, you can even do pipeline templating if
  necessary:

  \code{{
  name: ci
  plan:
  - \bold{task: generate-template}
  - set_pipeline: fancy-templated-pipeline
    file: generated-pipeline/foo.yml
  }}
}

\detail{Pipelines within projects}{
  Pipelines within a project change in a few ways:

  \list{
    Every job will automatically have the project resource available to its
    build plan, just like the project's own \code{plan}.
  }{
    Pipelines will no longer list their own resource definitions. Instead,
    there will be project-wide resource definitions.
  }{
    Pipelines will be able to reference each other's jobs via \code{passed}
    constraints. This is the missing piece for 'spaces'.
  }
}

\detail{Simpler build plans}{
  \side-by-side{
    Before:

    \code{{
    in_parallel:
    - task: fly-linux
      file: ci/tasks/fly-linux.yml
    - task: fly-darwin
      file: ci/tasks/fly-darwin.yml
    - task: fly-windows
      file: ci/tasks/fly-windows.yml
    }}
  }{
    After:

    \code{{
    in_parallel:
    - task: fly-linux
    - task: fly-darwin
    - task: fly-windows
    }}
  }

  This reads a lot better, builds on existing usage patterns, and task names
  are actually useful now!
}

\detail{Project-level creds}{
  Projects define credential managers as \code{var_sources}:

  \code{{
  name: ci

  \bold{var_sources}:
  - type: vault
    config: # ...

  plan: # ...
  }}

  The proximity to \code{plan:} makes it easy to visibly audit credential
  access within the project.
}

\detail{Complexity estimate}{
  \bold{API}: medium - there's a new object owner in town, so I expect some API
  noise. Maybe we should invest in non-hierarchical URLs at this point?

  \bold{Core}: medium/large - this is a bit of an epic, but it's at least
  grounded in well-understood ideas (i.e. build plans). I think there are
  interesting, relatively simple ways to design this.

  \bold{UX}: medium/large - we'll need project builds to show up in the UI
  somewhere. And we'll probably want to think about any navigation
  implications.
}

\title-slide{Putting it all together...}{
  \exodia{img/exodia-together.jpg}
}

\detail{Spaces?}{
  Circling back to 'spaces', let's see how these features add up:

  \list{
    Dynamically running pipelines across branches and PRs: \bold{projects} +
    \bold{\code{across} step} + \bold{\code{set_pipeline} step}.
  }{
    "Fanning in" across spaces is possible with \bold{projects}.
  }{
    Automatically cleaning up spaces which no longer exist: \bold{instanced
    pipelines} become automatically \bold{archived}.
  }
}

\detail{Demo 1: simple project}{
  \code{{
  name: booklit
  plan:
  - task: test
  }}

  \codeblock{sh}{{
  fly set-project -p booklit -t git \\
    -s uri=https://github.com/vito/booklit \\
    -c ci
  }}

  This should feel intuitive for smaller projects which may not need a
  sophisticated pipeline system. Concourse has been described as 'overkill' for
  such use cases - hopefully this bridges the gap.
}

\detail{Demo 2: git ops project}{
  \code{{
  name: ci
  var_sources:
  - type: vault
    config: # ...
  plan:
  - \bold{set_pipeline}: concourse
  - \bold{set_pipeline}: prs
  }}

  In this case it might make more sense for \code{prs} to be a separate
  project so it doesn't share the credential manager config.
}

\detail{Demo 3: spatial pipelines}{
  \code{{
  \bold{name}: ci
  \bold{plan}:
  - \bold{set_pipeline}: concourse
  - \bold{across}: release-branches
    as: branch
    do:
    - \bold{set_pipeline}: release
      \bold{instance_fragment}: branch
  - \bold{across}: feature-branches
    as: branch
    do:
    - \bold{set_pipeline}: branch
      \bold{instance_fragment}: branch
  }}
}

\title-slide{your metaphor sucks}{
  a brief side-tangent
}

\detail{Broken metaphor}{
  ...Ok, the Exodia metaphor is a little broken.

  With Exodia, each card on its own is completely worthless until you have all
  five.

  The entire point of this roadmap is that each feature is useful
  independently.
}

\detail{Better metaphor?}{
  A better metaphor would be "Blue Eyes White Dragon":

  \center{
    \exodia{img/blue-eyes-white-dragon.png}{small-card}
    \exodia{img/blue-eyes-white-dragon.png}{small-card}
    \exodia{img/blue-eyes-white-dragon.png}{small-card}
    =
    \exodia{img/blue-eyes-ultimate-dragon.png}{small-card}
  }

  ...but we have five features, not three.
}

\detail{Better metaphor?}{
  And we all know how that turned out anyway.

  \center{
    \exodia{img/yugi-exodia-head.jpg}{small-screen}
    \exodia{img/kaiba.png}{small-screen}
  }
}

\title-slide{Outcomes}{
  What will we have achieved?
}

\detail{Scales with more projects}{
  \bold{Projects} accomplish a Travis/Circle CI -like workflow. For simpler
  projects this may be all you need.

  At this point, the user will be introduced to resources, tasks, and build
  plans.

  If and when they need to take the next step, then they can start using
  pipelines and adopt a "\code{git} ops" workflow.

  By then, the only new concept is \code{passed} constraints.
}

\detail{Inter-dependent pipelines}{
  \bold{Projects} allow pipelines to reference each other in \code{passed}
  constraints.

  This way users can configure independent pipelines for 'matrix' style
  workflows, i.e. testing across IaaSes.
}

\detail{Pipeline automation}{
  The \bold{\code{set_pipeline} step} allows for pipelines to be configured as
  part of a build plan.

  Along the way, we can deprecate the \code{concourse-pipeline} resource, which
  has two smelly problems:

  \list{
    authenticating with Concourse
  }{
    keeping \code{fly} in sync with your Concourse version
  }
}

\detail{Pipeline hierarchies}{
  \bold{Pipeline instances} allow for a common pipeline template to use some of
  its \code{((vars))} as part of the pipeline identifier.

  This removes a lot of the need for 'hierarchical pipelines', which has been
  trotted around as an idea for a long time.

  Pipeline instances should feel less complicated than arbitrary hierarchies
  (depth 2 is simpler than depth N).
}

\detail{Build/pipeline matrixes}{
  The \bold{\code{across} step} is the true 'root' of spatial automation. And
  because it just happens within a single build, it's a \italic{lot} easier to
  reason about.

  By composing the \code{across} step with the \bold{\code{set_pipeline} step},
  the mechanics of spatial pipelines should also be pretty easy to reason
  about.
}

\detail{De-risked roadmap}{
  For a long while now 'spaces' has been thought of as one big feature with a
  whole lot of implications.

  By thinking about it as the intersection of five smaller features, our
  roadmap is heavily de-risked.
}

\slide{So...what's the roadmap?}{
  \list{
    Resources v2: let's finally implement this
  }{
    \code{set_pipeline} step: deprecate \code{concourse-pipeline} resource
  }{
    Projects: smoothen learning curve
  }{
    Archiving pipelines: nice-to-have
  }{
    Instanced pipelines: automatic archiving, figure out nav
  }{
    \code{across} step: open the spatial floodgates
  }
}

\slide{References}{
  \list{
    \link{#523}{https://github.com/concourse/concourse/issues/523} Hierarchical pipelines
  }{
    \link{#1200}{https://github.com/concourse/concourse/issues/1200} How do you use \code{fly set-pipeline}?
  }{
    \link{#1707}{https://github.com/concourse/concourse/issues/1707} Spatial resource flows
  }{
    \link{#1994}{https://github.com/concourse/concourse/issues/1994} Split pipelines up; simple templating
  }{
    \link{#3985}{https://github.com/concourse/concourse/issues/3985} Stricter naming conventions
  }{
    \link{RFC #21}{https://github.com/concourse/rfcs/pull/21} \strike{Team} Project credential managers
  }
}
